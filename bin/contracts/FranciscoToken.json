{
    "contractName": "FranciscoToken",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "cap",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cap",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address payable",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/contracts/FranciscoToken.sol\":\"FranciscoToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/contracts/FranciscoToken.sol\":{\"keccak256\":\"0xc8c35c5b39beaec85c5f97cbb08c06e669fccb361f84c309bdfa156363ab46cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://faadbc42e94ba697b48fceeb00bfc61817f97c541eeee79a354811ba860d2a2c\",\"dweb:/ipfs/QmTnLmJuUMrP1WGYAcaAszsy9uZH5Vzvwc5TRRdJFAHV9e\"]},\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"keccak256\":\"0x3fe04ed1daf0f12454333fde982a25b103860d8a010dd5d8479b83ebf1dfb788\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8322152771e94c9e28a3bd9e7c9d5dd4fdd00ae214f95915962a6638d8dfc7d6\",\"dweb:/ipfs/QmaXJvF3UjRHacx3nPgt94DwAuXCkEoz6fS7MLr2jbuJyW\"]},\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
    "bytecode": "60a06040523480156200001157600080fd5b5060405162000e6a38038062000e6a83398101604081905262000034916200029e565b620000426012600a620003cd565b6200004e9082620003e5565b6040518060400160405280600e81526020016d233930b731b4b9b1b7aa37b5b2b760911b8152506040518060400160405280600381526020016246544b60e81b8152508160039081620000a29190620004a3565b506004620000b18282620004a3565b505050600081116200010a5760405162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a206361702069732030000000000000000000000060448201526064015b60405180910390fd5b608052600580546001600160a01b03191633908117909155620001509062000130601290565b6200013d90600a620003cd565b6200014a906064620003e5565b62000157565b5062000585565b608051816200016560025490565b6200017191906200056f565b1115620001c15760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000101565b620001cd8282620001d1565b5050565b6001600160a01b038216620002295760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000101565b80600260008282546200023d91906200056f565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620001cd600083835b505050565b600060208284031215620002b157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200030f578160001904821115620002f357620002f3620002b8565b808516156200030157918102915b93841c9390800290620002d3565b509250929050565b6000826200032857506001620003c7565b816200033757506000620003c7565b81600181146200035057600281146200035b576200037b565b6001915050620003c7565b60ff8411156200036f576200036f620002b8565b50506001821b620003c7565b5060208310610133831016604e8410600b8410161715620003a0575081810a620003c7565b620003ac8383620002ce565b8060001904821115620003c357620003c3620002b8565b0290505b92915050565b6000620003de60ff84168362000317565b9392505050565b8082028115828204841417620003c757620003c7620002b8565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200042a57607f821691505b6020821081036200044b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200029957600081815260208120601f850160051c810160208610156200047a5750805b601f850160051c820191505b818110156200049b5782815560010162000486565b505050505050565b81516001600160401b03811115620004bf57620004bf620003ff565b620004d781620004d0845462000415565b8462000451565b602080601f8311600181146200050f5760008415620004f65750858301515b600019600386901b1c1916600185901b1785556200049b565b600085815260208120601f198616915b8281101562000540578886015182559484019460019091019084016200051f565b50858210156200055f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003c757620003c7620002b8565b6080516108c9620005a1600039600061014b01526108c96000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101d6578063a457c2d7146101de578063a9059cbb146101f1578063dd62ed3e1461020457600080fd5b8063395093511461016f57806370a08231146101825780638da5cb5b146101ab57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063355274ea14610149575b600080fd5b6100dc610217565b6040516100e99190610713565b60405180910390f35b61010561010036600461077d565b6102a9565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046107a7565b6102c3565b604051601281526020016100e9565b7f0000000000000000000000000000000000000000000000000000000000000000610119565b61010561017d36600461077d565b6102e7565b6101196101903660046107e3565b6001600160a01b031660009081526020819052604090205490565b6005546101be906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6100dc610309565b6101056101ec36600461077d565b610318565b6101056101ff36600461077d565b610398565b610119610212366004610805565b6103a6565b60606003805461022690610838565b80601f016020809104026020016040519081016040528092919081815260200182805461025290610838565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050505050905090565b6000336102b78185856103d1565b60019150505b92915050565b6000336102d18582856104f5565b6102dc85858561056f565b506001949350505050565b6000336102b78185856102fa83836103a6565b6103049190610872565b6103d1565b60606004805461022690610838565b6000338161032682866103a6565b90508381101561038b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102dc82868684036103d1565b6000336102b781858561056f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610382565b6001600160a01b0382166104945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610382565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061050184846103a6565b90506000198114610569578181101561055c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610382565b61056984848484036103d1565b50505050565b6001600160a01b0383166105d35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610382565b6001600160a01b0382166106355760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610382565b6001600160a01b038316600090815260208190526040902054818110156106ad5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610382565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610569565b600060208083528351808285015260005b8181101561074057858101830151858201604001528201610724565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461077857600080fd5b919050565b6000806040838503121561079057600080fd5b61079983610761565b946020939093013593505050565b6000806000606084860312156107bc57600080fd5b6107c584610761565b92506107d360208501610761565b9150604084013590509250925092565b6000602082840312156107f557600080fd5b6107fe82610761565b9392505050565b6000806040838503121561081857600080fd5b61082183610761565b915061082f60208401610761565b90509250929050565b600181811c9082168061084c57607f821691505b60208210810361086c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102bd57634e487b7160e01b600052601160045260246000fdfea264697066735822122098aac45e9e70ce75548b377338b7f2d499a77148a2f410bc3e45f9d64ce3790064736f6c63430008130033",
    "deployedBytecode": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101d6578063a457c2d7146101de578063a9059cbb146101f1578063dd62ed3e1461020457600080fd5b8063395093511461016f57806370a08231146101825780638da5cb5b146101ab57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063355274ea14610149575b600080fd5b6100dc610217565b6040516100e99190610713565b60405180910390f35b61010561010036600461077d565b6102a9565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b6101056101353660046107a7565b6102c3565b604051601281526020016100e9565b7f0000000000000000000000000000000000000000000000000000000000000000610119565b61010561017d36600461077d565b6102e7565b6101196101903660046107e3565b6001600160a01b031660009081526020819052604090205490565b6005546101be906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6100dc610309565b6101056101ec36600461077d565b610318565b6101056101ff36600461077d565b610398565b610119610212366004610805565b6103a6565b60606003805461022690610838565b80601f016020809104026020016040519081016040528092919081815260200182805461025290610838565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050505050905090565b6000336102b78185856103d1565b60019150505b92915050565b6000336102d18582856104f5565b6102dc85858561056f565b506001949350505050565b6000336102b78185856102fa83836103a6565b6103049190610872565b6103d1565b60606004805461022690610838565b6000338161032682866103a6565b90508381101561038b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102dc82868684036103d1565b6000336102b781858561056f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610382565b6001600160a01b0382166104945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610382565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061050184846103a6565b90506000198114610569578181101561055c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610382565b61056984848484036103d1565b50505050565b6001600160a01b0383166105d35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610382565b6001600160a01b0382166106355760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610382565b6001600160a01b038316600090815260208190526040902054818110156106ad5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610382565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610569565b600060208083528351808285015260005b8181101561074057858101830151858201604001528201610724565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461077857600080fd5b919050565b6000806040838503121561079057600080fd5b61079983610761565b946020939093013593505050565b6000806000606084860312156107bc57600080fd5b6107c584610761565b92506107d360208501610761565b9150604084013590509250925092565b6000602082840312156107f557600080fd5b6107fe82610761565b9392505050565b6000806040838503121561081857600080fd5b61082183610761565b915061082f60208401610761565b90509250929050565b600181811c9082168061084c57607f821691505b60208210810361086c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102bd57634e487b7160e01b600052601160045260246000fdfea264697066735822122098aac45e9e70ce75548b377338b7f2d499a77148a2f410bc3e45f9d64ce3790064736f6c63430008130033",
    "sourceMap": "411:275:0:-:0;;;496:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;570:16;3173:2:1;570::0;:16;:::i;:::-;563:24;;:3;:24;:::i;:::-;1976:113:1;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;2050:5;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;501:1:3;494:4;:8;486:42;;;;-1:-1:-1;;;486:42:3;;4814:2:6;486:42:3;;;4796:21:6;4853:2;4833:18;;;4826:30;4892:23;4872:18;;;4865:51;4933:18;;486:42:3;;;;;;;;;538:11;;599:5:0::2;:27:::0;;-1:-1:-1;;;;;;599:27:0::2;615:10;599:27:::0;;::::2;::::0;;;637:38:::2;::::0;663:10:::2;3173:2:1::0;;3091:91;663:10:0::2;657:16;::::0;:2:::2;:16;:::i;:::-;650:24;::::0;:3:::2;:24;:::i;:::-;637:5;:38::i;:::-;496:187:::0;411:275;;769:204:3;705:4;;883:6;861:19;3329:12:1;;;3242:106;861:19:3;:28;;;;:::i;:::-;:37;;853:75;;;;-1:-1:-1;;;853:75:3;;5294:2:6;853:75:3;;;5276:21:6;5333:2;5313:18;;;5306:30;5372:27;5352:18;;;5345:55;5417:18;;853:75:3;5092:349:6;853:75:3;938:28;950:7;959:6;938:11;:28::i;:::-;769:204;;:::o;8567:535:1:-;-1:-1:-1;;;;;8650:21:1;;8642:65;;;;-1:-1:-1;;;8642:65:1;;5648:2:6;8642:65:1;;;5630:21:6;5687:2;5667:18;;;5660:30;5726:33;5706:18;;;5699:61;5777:18;;8642:65:1;5446:355:6;8642:65:1;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:1;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;5952:25:6;;;8999:37:1;;5925:18:6;8999:37:1;;;;;;;9047:48;9075:1;9079:7;9088:6;12180:121;;;;:::o;14:184:6:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:6;;14:184;-1:-1:-1;14:184:6:o;203:127::-;264:10;259:3;255:20;252:1;245:31;295:4;292:1;285:15;319:4;316:1;309:15;335:422;424:1;467:5;424:1;481:270;502:7;492:8;489:21;481:270;;;561:4;557:1;553:6;549:17;543:4;540:27;537:53;;;570:18;;:::i;:::-;620:7;610:8;606:22;603:55;;;640:16;;;;603:55;719:22;;;;679:15;;;;481:270;;;485:3;335:422;;;;;:::o;762:806::-;811:5;841:8;831:80;;-1:-1:-1;882:1:6;896:5;;831:80;930:4;920:76;;-1:-1:-1;967:1:6;981:5;;920:76;1012:4;1030:1;1025:59;;;;1098:1;1093:130;;;;1005:218;;1025:59;1055:1;1046:10;;1069:5;;;1093:130;1130:3;1120:8;1117:17;1114:43;;;1137:18;;:::i;:::-;-1:-1:-1;;1193:1:6;1179:16;;1208:5;;1005:218;;1307:2;1297:8;1294:16;1288:3;1282:4;1279:13;1275:36;1269:2;1259:8;1256:16;1251:2;1245:4;1242:12;1238:35;1235:77;1232:159;;;-1:-1:-1;1344:19:6;;;1376:5;;1232:159;1423:34;1448:8;1442:4;1423:34;:::i;:::-;1493:6;1489:1;1485:6;1481:19;1472:7;1469:32;1466:58;;;1504:18;;:::i;:::-;1542:20;;-1:-1:-1;762:806:6;;;;;:::o;1573:140::-;1631:5;1660:47;1701:4;1691:8;1687:19;1681:4;1660:47;:::i;:::-;1651:56;1573:140;-1:-1:-1;;;1573:140:6:o;1718:168::-;1791:9;;;1822;;1839:15;;;1833:22;;1819:37;1809:71;;1860:18;;:::i;1891:127::-;1952:10;1947:3;1943:20;1940:1;1933:31;1983:4;1980:1;1973:15;2007:4;2004:1;1997:15;2023:380;2102:1;2098:12;;;;2145;;;2166:61;;2220:4;2212:6;2208:17;2198:27;;2166:61;2273:2;2265:6;2262:14;2242:18;2239:38;2236:161;;2319:10;2314:3;2310:20;2307:1;2300:31;2354:4;2351:1;2344:15;2382:4;2379:1;2372:15;2236:161;;2023:380;;;:::o;2534:545::-;2636:2;2631:3;2628:11;2625:448;;;2672:1;2697:5;2693:2;2686:17;2742:4;2738:2;2728:19;2812:2;2800:10;2796:19;2793:1;2789:27;2783:4;2779:38;2848:4;2836:10;2833:20;2830:47;;;-1:-1:-1;2871:4:6;2830:47;2926:2;2921:3;2917:12;2914:1;2910:20;2904:4;2900:31;2890:41;;2981:82;2999:2;2992:5;2989:13;2981:82;;;3044:17;;;3025:1;3014:13;2981:82;;;2985:3;;;2534:545;;;:::o;3255:1352::-;3375:10;;-1:-1:-1;;;;;3397:30:6;;3394:56;;;3430:18;;:::i;:::-;3459:97;3549:6;3509:38;3541:4;3535:11;3509:38;:::i;:::-;3503:4;3459:97;:::i;:::-;3611:4;;3675:2;3664:14;;3692:1;3687:663;;;;4394:1;4411:6;4408:89;;;-1:-1:-1;4463:19:6;;;4457:26;4408:89;-1:-1:-1;;3212:1:6;3208:11;;;3204:24;3200:29;3190:40;3236:1;3232:11;;;3187:57;4510:81;;3657:944;;3687:663;2481:1;2474:14;;;2518:4;2505:18;;-1:-1:-1;;3723:20:6;;;3841:236;3855:7;3852:1;3849:14;3841:236;;;3944:19;;;3938:26;3923:42;;4036:27;;;;4004:1;3992:14;;;;3871:19;;3841:236;;;3845:3;4105:6;4096:7;4093:19;4090:201;;;4166:19;;;4160:26;-1:-1:-1;;4249:1:6;4245:14;;;4261:3;4241:24;4237:37;4233:42;4218:58;4203:74;;4090:201;-1:-1:-1;;;;;4337:1:6;4321:14;;;4317:22;4304:36;;-1:-1:-1;3255:1352:6:o;4962:125::-;5027:9;;;5048:10;;;5045:36;;;5061:18;;:::i;5806:177::-;411:275:0;;;;;;;;;;;;",
    "deployedSourceMap": "411:275:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:6;;1162:22;1144:41;;1132:2;1117:18;4431:197:1;1004:187:6;3242:106:1;3329:12;;3242:106;;;1342:25:6;;;1330:2;1315:18;3242:106:1;1196:177:6;5190:286:1;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;1853:36:6;;1841:2;1826:18;3091:91:1;1711:184:6;635:81:3;705:4;635:81;;5871:234:1;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;459:28:0;;;;;-1:-1:-1;;;;;459:28:0;;;;;;-1:-1:-1;;;;;2271:32:6;;;2253:51;;2241:2;2226:18;459:28:0;2091:219:6;2365:102:1;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;;:::i;2154:98::-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:5;4568:32:1;719:10:5;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:5;5373:38:1;5389:4;719:10:5;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;5871:234::-;5959:4;719:10:5;6013:64:1;719:10:5;6029:7:1;6066:10;6038:25;719:10:5;6029:7:1;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;6685:4;719:10:5;6685:4:1;6766:25;719:10:5;6783:7:1;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;3394:2:6;6801:85:1;;;3376:21:6;3433:2;3413:18;;;3406:30;3472:34;3452:18;;;3445:62;-1:-1:-1;;;3523:18:6;;;3516:35;3568:19;;6801:85:1;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:5;3860:28:1;719:10:5;3877:2:1;3881:6;3860:9;:28::i;3974:149::-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;10504:370::-;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;3800:2:6;10627:68:1;;;3782:21:6;3839:2;3819:18;;;3812:30;3878:34;3858:18;;;3851:62;-1:-1:-1;;;3929:18:6;;;3922:34;3973:19;;10627:68:1;3598:400:6;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;4205:2:6;10705:68:1;;;4187:21:6;4244:2;4224:18;;;4217:30;4283:34;4263:18;;;4256:62;-1:-1:-1;;;4334:18:6;;;4327:32;4376:19;;10705:68:1;4003:398:6;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1342:25:6;;;10835:32:1;;1315:18:6;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:1;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;4608:2:6;11404:68:1;;;4590:21:6;4647:2;4627:18;;;4620:30;4686:31;4666:18;;;4659:59;4735:18;;11404:68:1;4406:353:6;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;4966:2:6;7591:68:1;;;4948:21:6;5005:2;4985:18;;;4978:30;5044:34;5024:18;;;5017:62;-1:-1:-1;;;5095:18:6;;;5088:35;5140:19;;7591:68:1;4764:401:6;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;5372:2:6;7669:64:1;;;5354:21:6;5411:2;5391:18;;;5384:30;5450:34;5430:18;;;5423:62;-1:-1:-1;;;5501:18:6;;;5494:33;5544:19;;7669:64:1;5170:399:6;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;5776:2:6;7840:72:1;;;5758:21:6;5815:2;5795:18;;;5788:30;5854:34;5834:18;;;5827:62;-1:-1:-1;;;5905:18:6;;;5898:36;5951:19;;7840:72:1;5574:402:6;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1342:25:6;;;8161:13:1;;8210:26;;1315:18:6;8210:26:1;;;;;;;8247:37;12180:121;14:548:6;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:6;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:6:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:6:o;2315:260::-;2383:6;2391;2444:2;2432:9;2423:7;2419:23;2415:32;2412:52;;;2460:1;2457;2450:12;2412:52;2483:29;2502:9;2483:29;:::i;:::-;2473:39;;2531:38;2565:2;2554:9;2550:18;2531:38;:::i;:::-;2521:48;;2315:260;;;;;:::o;2580:380::-;2659:1;2655:12;;;;2702;;;2723:61;;2777:4;2769:6;2765:17;2755:27;;2723:61;2830:2;2822:6;2819:14;2799:18;2796:38;2793:161;;2876:10;2871:3;2867:20;2864:1;2857:31;2911:4;2908:1;2901:15;2939:4;2936:1;2929:15;2793:161;;2580:380;;;:::o;2965:222::-;3030:9;;;3051:10;;;3048:133;;;3103:10;3098:3;3094:20;3091:1;3084:31;3138:4;3135:1;3128:15;3166:4;3163:1;3156:15",
    "sourcePath": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/contracts/FranciscoToken.sol",
    "compiler": {
        "name": "solc",
        "version": "0.8.19+commit.7dd6d404"
    },
    "ast": {
        "absolutePath": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/contracts/FranciscoToken.sol",
        "exportedSymbols": {
            "Context": [
                823
            ],
            "ERC20": [
                633
            ],
            "ERC20Capped": [
                776
            ],
            "FranciscoToken": [
                46
            ],
            "IERC20": [
                711
            ],
            "IERC20Metadata": [
                801
            ]
        },
        "id": 47,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
            {
                "id": 1,
                "literals": [
                    "solidity",
                    "^",
                    "0.8",
                    ".19"
                ],
                "nodeType": "PragmaDirective",
                "src": "68:24:0"
            },
            {
                "absolutePath": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",
                "file": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",
                "id": 2,
                "nameLocation": "-1:-1:-1",
                "nodeType": "ImportDirective",
                "scope": 47,
                "sourceUnit": 634,
                "src": "96:145:0",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "absolutePath": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
                "file": "c:/Users/User01/Desktop/Stuff/07 - Code/19 - erc-20-tutorial/francisco-token/node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol",
                "id": 3,
                "nameLocation": "-1:-1:-1",
                "nodeType": "ImportDirective",
                "scope": 47,
                "sourceUnit": 777,
                "src": "244:162:0",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "abstract": false,
                "baseContracts": [
                    {
                        "baseName": {
                            "id": 4,
                            "name": "ERC20Capped",
                            "nameLocations": [
                                "438:11:0"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 776,
                            "src": "438:11:0"
                        },
                        "id": 5,
                        "nodeType": "InheritanceSpecifier",
                        "src": "438:11:0"
                    }
                ],
                "canonicalName": "FranciscoToken",
                "contractDependencies": [],
                "contractKind": "contract",
                "fullyImplemented": true,
                "id": 46,
                "linearizedBaseContracts": [
                    46,
                    776,
                    633,
                    801,
                    711,
                    823
                ],
                "name": "FranciscoToken",
                "nameLocation": "420:14:0",
                "nodeType": "ContractDefinition",
                "nodes": [
                    {
                        "constant": false,
                        "functionSelector": "8da5cb5b",
                        "id": 7,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "482:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "459:28:0",
                        "stateVariable": true,
                        "storageLocation": "default",
                        "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                        },
                        "typeName": {
                            "id": 6,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "459:15:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                            }
                        },
                        "visibility": "public"
                    },
                    {
                        "body": {
                            "id": 44,
                            "nodeType": "Block",
                            "src": "588:95:0",
                            "statements": [
                                {
                                    "expression": {
                                        "id": 31,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                            "id": 25,
                                            "name": "owner",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 7,
                                            "src": "599:5:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                            }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                            "arguments": [
                                                {
                                                    "expression": {
                                                        "id": 28,
                                                        "name": "msg",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 4294967281,
                                                        "src": "615:3:0",
                                                        "typeDescriptions": {
                                                            "typeIdentifier": "t_magic_message",
                                                            "typeString": "msg"
                                                        }
                                                    },
                                                    "id": 29,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberLocation": "619:6:0",
                                                    "memberName": "sender",
                                                    "nodeType": "MemberAccess",
                                                    "src": "615:10:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                    }
                                                }
                                            ],
                                            "expression": {
                                                "argumentTypes": [
                                                    {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                    }
                                                ],
                                                "id": 27,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "607:8:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_address_payable_$",
                                                    "typeString": "type(address payable)"
                                                },
                                                "typeName": {
                                                    "id": 26,
                                                    "name": "address",
                                                    "nodeType": "ElementaryTypeName",
                                                    "src": "607:8:0",
                                                    "stateMutability": "payable",
                                                    "typeDescriptions": {}
                                                }
                                            },
                                            "id": 30,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "607:19:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                            }
                                        },
                                        "src": "599:27:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_address_payable",
                                            "typeString": "address payable"
                                        }
                                    },
                                    "id": 32,
                                    "nodeType": "ExpressionStatement",
                                    "src": "599:27:0"
                                },
                                {
                                    "expression": {
                                        "arguments": [
                                            {
                                                "id": 34,
                                                "name": "owner",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 7,
                                                "src": "643:5:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                }
                                            },
                                            {
                                                "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                },
                                                "id": 41,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                    "hexValue": "313030",
                                                    "id": 35,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "650:3:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_100_by_1",
                                                        "typeString": "int_const 100"
                                                    },
                                                    "value": "100"
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                    "components": [
                                                        {
                                                            "commonType": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            },
                                                            "id": 39,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "lValueRequested": false,
                                                            "leftExpression": {
                                                                "hexValue": "3130",
                                                                "id": 36,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": true,
                                                                "kind": "number",
                                                                "lValueRequested": false,
                                                                "nodeType": "Literal",
                                                                "src": "657:2:0",
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_rational_10_by_1",
                                                                    "typeString": "int_const 10"
                                                                },
                                                                "value": "10"
                                                            },
                                                            "nodeType": "BinaryOperation",
                                                            "operator": "**",
                                                            "rightExpression": {
                                                                "arguments": [],
                                                                "expression": {
                                                                    "argumentTypes": [],
                                                                    "id": 37,
                                                                    "name": "decimals",
                                                                    "nodeType": "Identifier",
                                                                    "overloadedDeclarations": [],
                                                                    "referencedDeclaration": 121,
                                                                    "src": "663:8:0",
                                                                    "typeDescriptions": {
                                                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                                                        "typeString": "function () view returns (uint8)"
                                                                    }
                                                                },
                                                                "id": 38,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": false,
                                                                "kind": "functionCall",
                                                                "lValueRequested": false,
                                                                "nameLocations": [],
                                                                "names": [],
                                                                "nodeType": "FunctionCall",
                                                                "src": "663:10:0",
                                                                "tryCall": false,
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_uint8",
                                                                    "typeString": "uint8"
                                                                }
                                                            },
                                                            "src": "657:16:0",
                                                            "typeDescriptions": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            }
                                                        }
                                                    ],
                                                    "id": 40,
                                                    "isConstant": false,
                                                    "isInlineArray": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "TupleExpression",
                                                    "src": "656:18:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    }
                                                },
                                                "src": "650:24:0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                },
                                                {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            ],
                                            "id": 33,
                                            "name": "_mint",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                                775
                                            ],
                                            "referencedDeclaration": 775,
                                            "src": "637:5:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                                "typeString": "function (address,uint256)"
                                            }
                                        },
                                        "id": 42,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "637:38:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 43,
                                    "nodeType": "ExpressionStatement",
                                    "src": "637:38:0"
                                }
                            ]
                        },
                        "id": 45,
                        "implemented": true,
                        "kind": "constructor",
                        "modifiers": [
                            {
                                "arguments": [
                                    {
                                        "hexValue": "4672616e636973636f546f6b656e",
                                        "id": 12,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "527:16:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_c85b60528a2fcab9878e0158a95ee07ae65a74f2d1b8cf8c2e92994b443c7530",
                                            "typeString": "literal_string \"FranciscoToken\""
                                        },
                                        "value": "FranciscoToken"
                                    },
                                    {
                                        "hexValue": "46544b",
                                        "id": 13,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "544:5:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_02bca2b3c9dc86ef031c0cc3e00d82c459209872591be274d19868b0c5bb8641",
                                            "typeString": "literal_string \"FTK\""
                                        },
                                        "value": "FTK"
                                    }
                                ],
                                "id": 14,
                                "kind": "baseConstructorSpecifier",
                                "modifierName": {
                                    "id": 11,
                                    "name": "ERC20",
                                    "nameLocations": [
                                        "521:5:0"
                                    ],
                                    "nodeType": "IdentifierPath",
                                    "referencedDeclaration": 633,
                                    "src": "521:5:0"
                                },
                                "nodeType": "ModifierInvocation",
                                "src": "521:29:0"
                            },
                            {
                                "arguments": [
                                    {
                                        "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                        },
                                        "id": 22,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                            "id": 16,
                                            "name": "cap",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 9,
                                            "src": "563:3:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                            }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                            "components": [
                                                {
                                                    "commonType": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    },
                                                    "id": 20,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                        "hexValue": "3130",
                                                        "id": 17,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "kind": "number",
                                                        "lValueRequested": false,
                                                        "nodeType": "Literal",
                                                        "src": "570:2:0",
                                                        "typeDescriptions": {
                                                            "typeIdentifier": "t_rational_10_by_1",
                                                            "typeString": "int_const 10"
                                                        },
                                                        "value": "10"
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "**",
                                                    "rightExpression": {
                                                        "arguments": [],
                                                        "expression": {
                                                            "argumentTypes": [],
                                                            "id": 18,
                                                            "name": "decimals",
                                                            "nodeType": "Identifier",
                                                            "overloadedDeclarations": [],
                                                            "referencedDeclaration": 121,
                                                            "src": "576:8:0",
                                                            "typeDescriptions": {
                                                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                                                "typeString": "function () view returns (uint8)"
                                                            }
                                                        },
                                                        "id": 19,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": false,
                                                        "kind": "functionCall",
                                                        "lValueRequested": false,
                                                        "nameLocations": [],
                                                        "names": [],
                                                        "nodeType": "FunctionCall",
                                                        "src": "576:10:0",
                                                        "tryCall": false,
                                                        "typeDescriptions": {
                                                            "typeIdentifier": "t_uint8",
                                                            "typeString": "uint8"
                                                        }
                                                    },
                                                    "src": "570:16:0",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    }
                                                }
                                            ],
                                            "id": 21,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "569:18:0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                            }
                                        },
                                        "src": "563:24:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                        }
                                    }
                                ],
                                "id": 23,
                                "kind": "baseConstructorSpecifier",
                                "modifierName": {
                                    "id": 15,
                                    "name": "ERC20Capped",
                                    "nameLocations": [
                                        "551:11:0"
                                    ],
                                    "nodeType": "IdentifierPath",
                                    "referencedDeclaration": 776,
                                    "src": "551:11:0"
                                },
                                "nodeType": "ModifierInvocation",
                                "src": "551:37:0"
                            }
                        ],
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 10,
                            "nodeType": "ParameterList",
                            "parameters": [
                                {
                                    "constant": false,
                                    "id": 9,
                                    "mutability": "mutable",
                                    "name": "cap",
                                    "nameLocation": "516:3:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 45,
                                    "src": "508:11:0",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                    },
                                    "typeName": {
                                        "id": 8,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "508:7:0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                        }
                                    },
                                    "visibility": "internal"
                                }
                            ],
                            "src": "507:13:0"
                        },
                        "returnParameters": {
                            "id": 24,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "588:0:0"
                        },
                        "scope": 46,
                        "src": "496:187:0",
                        "stateMutability": "nonpayable",
                        "virtual": false,
                        "visibility": "public"
                    }
                ],
                "scope": 47,
                "src": "411:275:0",
                "usedErrors": []
            }
        ],
        "src": "68:618:0"
    },
    "functionHashes": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "cap()": "355274ea",
        "decimals()": "313ce567",
        "decreaseAllowance(address,uint256)": "a457c2d7",
        "increaseAllowance(address,uint256)": "39509351",
        "name()": "06fdde03",
        "owner()": "8da5cb5b",
        "symbol()": "95d89b41",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd"
    },
    "gasEstimates": {
        "creation": {
            "codeDepositCost": "449800",
            "executionCost": "infinite",
            "totalCost": "infinite"
        },
        "external": {
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "24628",
            "balanceOf(address)": "2585",
            "cap()": "infinite",
            "decimals()": "266",
            "decreaseAllowance(address,uint256)": "26994",
            "increaseAllowance(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2404",
            "symbol()": "infinite",
            "totalSupply()": "2326",
            "transfer(address,uint256)": "51116",
            "transferFrom(address,address,uint256)": "infinite"
        }
    }
}